This boggle implementation uses NLTK and Wordnet as a rough-and-ready source
of English words. As you'll see if you check the code, I had fun with the
recursive search and lookups. I was not interested in the aesthetics, and I
have not fussed too much with the dictionary which has drawbacks as noted
below.

I defined the letter cubes from my kids' own game. I don't know if the letter
selections are universal across games, or standardised.

Qu appears on one face of one cube. This will appear as Q on the 4x4 board
matrix, but as qu in words found.

PREPARATION
===========

On my Mac, I installed NLTK using Darwin Ports, then followed the instructions
from NLTK on loading a corpus.

I pulled down the regular Wordnet corpus.  Perhaps I'll try the Shakespeare
corpus later, for a classical twist.

Note that it's important to invoke the Darwin Ports python, or you won't be
able to import nltk.

A high-performance incremental search dictionary found prebuilt in btdi.py can
be rebuilt automatically by running

     % /opt/local/bin/python2.6 btdictmaker.py 
     
(It's the compilation of btdi.py that makes the first run take a few seconds.)

Then simply invoke boggle, and look at the output, as shown below.

TODO 
====

   - I did not bother to add scoring.
   
   - Plurals are not present in wordnet. Ideally, btdictmaker should
     differentiate the parts of speech and add plural forms for nouns. Of
     course there are special cases for latin names (medium -> media) so the
     effort may be better spent finding a more appropriate dictionary source
     that presents plural forms, and knows all the exceptions
     
   - Wordnet contains placenames. No proper nouns are allowed in the real
     game.

THE OUTPUT
==========

Clearly this is very basic.  

First the game board is printed, then the words. In the first part of the list
the words are in the order of emergence from the search algorithm so that you
can easily follow along. Later an alpha sorted summary of unique words is
printed, together with the coordinated of the traversal chain.

  
[Streak2:~/dev/int/pyboggle] russ% time /opt/local/bin/python2.6 boggle.py
T S P T
B O E L
W U U H
L M H E
top
toe
tow
stop
stob
stow
spot
spelt
sop
sob
sow
sou
soul
set
seoul
pot
post
pose
poe
poet
pest
pesto
pet
pelt
plum
test
bot
bos
bose
bop
bow
bowl
bum
ops
opel
owl
epos
eos
let
leo
leu
luo
wop
woe
hep
hel
help
hue
hum
mule
hub

collated and sorted word with their traversal chains
bop
     [[1, 0], [1, 1], [0, 2]]
bos
     [[1, 0], [1, 1], [0, 1]]
bose
     [[1, 0], [1, 1], [0, 1], [1, 2]]
bot
     [[1, 0], [1, 1], [0, 0]]
bow
     [[1, 0], [1, 1], [2, 0]]
bowl
     [[1, 0], [1, 1], [2, 0], [3, 0]]
bum
     [[1, 0], [2, 1], [3, 1]]
eos
     [[1, 2], [1, 1], [0, 1]]
epos
     [[1, 2], [0, 2], [1, 1], [0, 1]]
hel
     [[2, 3], [1, 2], [1, 3]]
help
     [[2, 3], [1, 2], [1, 3], [0, 2]]
hep
     [[2, 3], [1, 2], [0, 2]]
hub
     [[3, 2], [2, 1], [1, 0]]
hue
     [[2, 3], [2, 2], [1, 2]]
     [[2, 3], [2, 2], [3, 3]]
     [[3, 2], [2, 1], [1, 2]]
     [[3, 2], [2, 2], [1, 2]]
     [[3, 2], [2, 2], [3, 3]]
hum
     [[2, 3], [2, 2], [3, 1]]
     [[3, 2], [2, 1], [3, 1]]
     [[3, 2], [2, 2], [3, 1]]
leo
     [[1, 3], [1, 2], [1, 1]]
let
     [[1, 3], [1, 2], [0, 3]]
leu
     [[1, 3], [1, 2], [2, 1]]
     [[1, 3], [1, 2], [2, 2]]
luo
     [[1, 3], [2, 2], [1, 1]]
     [[3, 0], [2, 1], [1, 1]]
mule
     [[3, 1], [2, 2], [1, 3], [1, 2]]
opel
     [[1, 1], [0, 2], [1, 2], [1, 3]]
ops
     [[1, 1], [0, 2], [0, 1]]
owl
     [[1, 1], [2, 0], [3, 0]]
pelt
     [[0, 2], [1, 2], [1, 3], [0, 3]]
pest
     [[0, 2], [1, 2], [0, 1], [0, 0]]
pesto
     [[0, 2], [1, 2], [0, 1], [0, 0], [1, 1]]
pet
     [[0, 2], [1, 2], [0, 3]]
plum
     [[0, 2], [1, 3], [2, 2], [3, 1]]
poe
     [[0, 2], [1, 1], [1, 2]]
poet
     [[0, 2], [1, 1], [1, 2], [0, 3]]
pose
     [[0, 2], [1, 1], [0, 1], [1, 2]]
post
     [[0, 2], [1, 1], [0, 1], [0, 0]]
pot
     [[0, 2], [1, 1], [0, 0]]
seoul
     [[0, 1], [1, 2], [1, 1], [2, 1], [3, 0]]
     [[0, 1], [1, 2], [1, 1], [2, 2], [1, 3]]
set
     [[0, 1], [1, 2], [0, 3]]
sob
     [[0, 1], [1, 1], [1, 0]]
sop
     [[0, 1], [1, 1], [0, 2]]
sou
     [[0, 1], [1, 1], [2, 1]]
     [[0, 1], [1, 1], [2, 2]]
soul
     [[0, 1], [1, 1], [2, 1], [3, 0]]
     [[0, 1], [1, 1], [2, 2], [1, 3]]
sow
     [[0, 1], [1, 1], [2, 0]]
spelt
     [[0, 1], [0, 2], [1, 2], [1, 3], [0, 3]]
spot
     [[0, 1], [0, 2], [1, 1], [0, 0]]
stob
     [[0, 1], [0, 0], [1, 1], [1, 0]]
stop
     [[0, 1], [0, 0], [1, 1], [0, 2]]
stow
     [[0, 1], [0, 0], [1, 1], [2, 0]]
test
     [[0, 3], [1, 2], [0, 1], [0, 0]]
toe
     [[0, 0], [1, 1], [1, 2]]
top
     [[0, 0], [1, 1], [0, 2]]
tow
     [[0, 0], [1, 1], [2, 0]]
woe
     [[2, 0], [1, 1], [1, 2]]
wop
     [[2, 0], [1, 1], [0, 2]]
0.447u 0.128s 0:00.57 98.2%     0+0k 0+0io 0pf+0w
